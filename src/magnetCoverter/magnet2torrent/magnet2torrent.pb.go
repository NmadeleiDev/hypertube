// Code generated by protoc-gen-go. DO NOT EDIT.
// source: magnet2torrent.proto

package magnet2torrent

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

// The request message containing the magnet url
type Magnet2TorrentRequest struct {
	Magnet               string   `protobuf:"bytes,1,opt,name=magnet,proto3" json:"magnet,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Magnet2TorrentRequest) Reset()         { *m = Magnet2TorrentRequest{} }
func (m *Magnet2TorrentRequest) String() string { return proto.CompactTextString(m) }
func (*Magnet2TorrentRequest) ProtoMessage()    {}
func (*Magnet2TorrentRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_magnet2torrent_ee92ccf69d51241f, []int{0}
}
func (m *Magnet2TorrentRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Magnet2TorrentRequest.Unmarshal(m, b)
}
func (m *Magnet2TorrentRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Magnet2TorrentRequest.Marshal(b, m, deterministic)
}
func (dst *Magnet2TorrentRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Magnet2TorrentRequest.Merge(dst, src)
}
func (m *Magnet2TorrentRequest) XXX_Size() int {
	return xxx_messageInfo_Magnet2TorrentRequest.Size(m)
}
func (m *Magnet2TorrentRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_Magnet2TorrentRequest.DiscardUnknown(m)
}

var xxx_messageInfo_Magnet2TorrentRequest proto.InternalMessageInfo

func (m *Magnet2TorrentRequest) GetMagnet() string {
	if m != nil {
		return m.Magnet
	}
	return ""
}

// The response message containing the torrent
type Magnet2TorrentReply struct {
	Torrent              []byte   `protobuf:"bytes,1,opt,name=torrent,proto3" json:"torrent,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Magnet2TorrentReply) Reset()         { *m = Magnet2TorrentReply{} }
func (m *Magnet2TorrentReply) String() string { return proto.CompactTextString(m) }
func (*Magnet2TorrentReply) ProtoMessage()    {}
func (*Magnet2TorrentReply) Descriptor() ([]byte, []int) {
	return fileDescriptor_magnet2torrent_ee92ccf69d51241f, []int{1}
}
func (m *Magnet2TorrentReply) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Magnet2TorrentReply.Unmarshal(m, b)
}
func (m *Magnet2TorrentReply) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Magnet2TorrentReply.Marshal(b, m, deterministic)
}
func (dst *Magnet2TorrentReply) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Magnet2TorrentReply.Merge(dst, src)
}
func (m *Magnet2TorrentReply) XXX_Size() int {
	return xxx_messageInfo_Magnet2TorrentReply.Size(m)
}
func (m *Magnet2TorrentReply) XXX_DiscardUnknown() {
	xxx_messageInfo_Magnet2TorrentReply.DiscardUnknown(m)
}

var xxx_messageInfo_Magnet2TorrentReply proto.InternalMessageInfo

func (m *Magnet2TorrentReply) GetTorrent() []byte {
	if m != nil {
		return m.Torrent
	}
	return nil
}

func init() {
	proto.RegisterType((*Magnet2TorrentRequest)(nil), "Magnet2TorrentRequest")
	proto.RegisterType((*Magnet2TorrentReply)(nil), "Magnet2TorrentReply")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Magnet2TorrentClient is the client API for Magnet2Torrent service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type Magnet2TorrentClient interface {
	// Converts magnet uri to torrent file
	Magnet2Torrent(ctx context.Context, in *Magnet2TorrentRequest, opts ...grpc.CallOption) (*Magnet2TorrentReply, error)
}

type magnet2TorrentClient struct {
	cc *grpc.ClientConn
}

func NewMagnet2TorrentClient(cc *grpc.ClientConn) Magnet2TorrentClient {
	return &magnet2TorrentClient{cc}
}

func (c *magnet2TorrentClient) Magnet2Torrent(ctx context.Context, in *Magnet2TorrentRequest, opts ...grpc.CallOption) (*Magnet2TorrentReply, error) {
	out := new(Magnet2TorrentReply)
	err := c.cc.Invoke(ctx, "/Magnet2Torrent/Magnet2Torrent", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Magnet2TorrentServer is the server API for Magnet2Torrent service.
type Magnet2TorrentServer interface {
	// Converts magnet uri to torrent file
	Magnet2Torrent(context.Context, *Magnet2TorrentRequest) (*Magnet2TorrentReply, error)
}

func RegisterMagnet2TorrentServer(s *grpc.Server, srv Magnet2TorrentServer) {
	s.RegisterService(&_Magnet2Torrent_serviceDesc, srv)
}

func _Magnet2Torrent_Magnet2Torrent_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Magnet2TorrentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(Magnet2TorrentServer).Magnet2Torrent(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Magnet2Torrent/Magnet2Torrent",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(Magnet2TorrentServer).Magnet2Torrent(ctx, req.(*Magnet2TorrentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Magnet2Torrent_serviceDesc = grpc.ServiceDesc{
	ServiceName: "Magnet2Torrent",
	HandlerType: (*Magnet2TorrentServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Magnet2Torrent",
			Handler:    _Magnet2Torrent_Magnet2Torrent_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "magnet2torrent.proto",
}

func init() {
	proto.RegisterFile("magnet2torrent.proto", fileDescriptor_magnet2torrent_ee92ccf69d51241f)
}

var fileDescriptor_magnet2torrent_ee92ccf69d51241f = []byte{
	// 126 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0x12, 0xc9, 0x4d, 0x4c, 0xcf,
	0x4b, 0x2d, 0x31, 0x2a, 0xc9, 0x2f, 0x2a, 0x4a, 0xcd, 0x2b, 0xd1, 0x2b, 0x28, 0xca, 0x2f, 0xc9,
	0x57, 0xd2, 0xe7, 0x12, 0xf5, 0x85, 0x88, 0x87, 0x40, 0xc4, 0x83, 0x52, 0x0b, 0x4b, 0x53, 0x8b,
	0x4b, 0x84, 0xc4, 0xb8, 0xd8, 0x20, 0x1a, 0x24, 0x18, 0x15, 0x18, 0x35, 0x38, 0x83, 0xa0, 0x3c,
	0x25, 0x7d, 0x2e, 0x61, 0x74, 0x0d, 0x05, 0x39, 0x95, 0x42, 0x12, 0x5c, 0xec, 0x50, 0x83, 0xc1,
	0xea, 0x79, 0x82, 0x60, 0x5c, 0xa3, 0x20, 0x2e, 0x3e, 0x54, 0x0d, 0x42, 0x0e, 0x18, 0x22, 0x62,
	0x7a, 0x58, 0x1d, 0x21, 0x25, 0xa2, 0x87, 0xc5, 0x2e, 0x25, 0x86, 0x24, 0x36, 0xb0, 0xe3, 0x8d,
	0x01, 0x01, 0x00, 0x00, 0xff, 0xff, 0xe1, 0xa8, 0x86, 0xc9, 0xd4, 0x00, 0x00, 0x00,
}
